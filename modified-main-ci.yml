trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'ui/*'
      - 'users/*'
      - 'posts/*'
      - 'comments/*'

pool:
  vmImage: ubuntu-latest

variables:
  serviceToBuild: ''

jobs:
  - job: DetermineService
    displayName: 'Determine Service to Build'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 0  # Fetch all history to avoid shallow clone issues

      - script: |
          echo "Checking for changes..."
          git status  # Display status to verify changes are detected

          if [ $(git rev-list --count HEAD) -eq 1 ]; then
              echo "This is the first commit. No previous commit to compare."
              echo "##vso[task.setvariable variable=serviceToBuild;isOutput=true;]none"
          else
              # Get the changed files and print them
              changed_files=$(git diff --name-only HEAD~1 HEAD)
              echo "Changed files: $changed_files"

              # Ensure the paths are matching the correct service directories
              changed_service=$(echo "$changed_files" | grep -E '^(ui|users|posts|comments)/' | cut -d'/' -f1 | uniq | head -n 1)
              echo "Detected service from changed files: $changed_service"

              if [ -z "$changed_service" ]; then
                  echo "No relevant changes detected."
                  echo "##vso[task.setvariable variable=serviceToBuild;isOutput=true;]none"
              else
                  echo "Detected changes in: $changed_service"
                  echo "##vso[task.setvariable variable=serviceToBuild;isOutput=true;]$changed_service"
              fi
          fi
        displayName: 'Determine Changed Service'

  - job: BuildService
    displayName: 'Build Detected Service'
    dependsOn: DetermineService
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      serviceToBuild: $[ dependencies.DetermineService.outputs['serviceToBuild'] ]
    steps:
      - script: |
          echo "Service to build set to: $(serviceToBuild)"
          echo "##vso[task.setvariable variable=finalServiceToBuild;isOutput=true]$(serviceToBuild)"
          echo "Current build ID: $(Build.BuildId)"
          echo "Current repository: $(Build.Repository.Name)"
          echo "Current branch: $(Build.SourceBranchName)"
          echo "Final serviceToBuild: $(serviceToBuild)"
        displayName: 'Debug Service to Build'
