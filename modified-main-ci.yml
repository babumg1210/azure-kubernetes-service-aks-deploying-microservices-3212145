trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'ui/*'
      - 'users/*'
      - 'posts/*'
      - 'comments/*'

pool:
  vmImage: ubuntu-latest

variables:
  serviceToBuild: ''  # Default to empty, will be set in the first job

jobs:
  - job: DetermineService
    displayName: 'Determine Service to Build'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        fetchDepth: 0  # Fetch all history to avoid shallow clone issues

      - script: |
          echo "Checking for changes..."
          git status  # Debugging: check git status to ensure changes are detected
          
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
              echo "This is the first commit. No previous commit to compare."
              echo "##vso[task.setvariable variable=serviceToBuild;isOutput=true;]none"
          else
              changed_files=$(git diff --name-only HEAD~1 HEAD)
              echo "Changed files: $changed_files"  # Debugging: show changed files
              
              # Ensure the paths are matching the correct service directories
              changed_service=$(echo "$changed_files" | grep -E '^(ui|users|posts|comments)/' | cut -d'/' -f1 | uniq | head -n 1)
              
              echo "Detected service: $changed_service"  # Debugging: check the service detected

              if [ -z "$changed_service" ]; then
                  echo "No relevant changes detected."
                  echo "##vso[task.setvariable variable=serviceToBuild;isOutput=true;]none"
              else
                  echo "Detected changes in: $changed_service"
                  serviceToBuildTrimmed=$(echo "$changed_service" | xargs)
                  echo "##vso[task.setvariable variable=serviceToBuild;isOutput=true;]$serviceToBuildTrimmed"
              fi
          fi
        displayName: 'Determine Changed Service'

      - script: |
          echo "Service to build set to: $(serviceToBuild)"
          echo "##vso[task.setvariable variable=serviceToBuildFromJob;isOutput=true]$(serviceToBuild)"
        displayName: 'Debug Service to Build'

  # - job: BuildComments
  #   displayName: 'Build Comments Service'
  #   dependsOn: DetermineService
  #   condition: eq(dependencies.DetermineService.outputs['DetermineService.serviceToBuild'], 'comments')
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #     - script: |
  #         echo "Building Comments Service..."
  #         echo "Service to build in BuildComments: $(serviceToBuild)"
  #         # Add your build commands here
  #       displayName: 'Build Comments Service'

  #     - template: template-pipeline.yml
  #       parameters:
  #         microservice: 'comments'
  #         dockerfilePath: 'comments/Dockerfile'
  #         azureSubscription: 'test-aks-application12'
  #         imageName: '$(Build.Repository.Name)-$(Build.SourceBranchName)-comments:$(Build.BuildId)'

  # - job: BuildPosts
  #   displayName: 'Build Posts Service'
  #   dependsOn: DetermineService
  #   condition: eq(dependencies.DetermineService.outputs['DetermineService.serviceToBuild'], 'posts')
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   steps:
  #     - script: |
  #         echo "Building Posts Service..."
  #         echo "Service to build in BuildPosts: $(serviceToBuild)"
  #         # Add your build commands here
  #       displayName: 'Build Posts Service'

  #     - template: template-pipeline.yml
  #       parameters:
  #         microservice: 'posts'
  #         dockerfilePath: 'posts/Dockerfile'
  #         azureSubscription: 'test-aks-application12'
  #         imageName: '$(Build.Repository.Name)-$(Build.SourceBranchName)-posts:$(Build.BuildId)'

  # - job: BuildUsers
  #   displayName: 'Build Users Service'
  #   dependsOn: DetermineService
  #   condition: eq(dependencies.DetermineService.outputs['DetermineService
