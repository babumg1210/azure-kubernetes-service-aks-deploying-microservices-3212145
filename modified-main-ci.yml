trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'ui/*'
      - 'users/*'
      - 'posts/*'
      - 'comments/*'

pool:
  vmImage: ubuntu-latest

jobs:
  - job: GetChangedFiles
    displayName: 'Get Changed Files'
    steps:
      - script: |
          echo "Getting changed files..."
          # Get the list of changed files from the last commit in the main branch
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only $(Build.SourceVersion) $(Build.SourceVersion)~1)
          echo "Changed files: $CHANGED_FILES"
          # Store changed files in a pipeline variable
          echo "##vso[task.setvariable variable=ChangedFiles;]$CHANGED_FILES"
        displayName: 'Fetch Changed Files'

  - job: BuildUI
    displayName: 'Build UI Service'
    condition: and(contains(variables['ChangedFiles'], 'ui/'), not(startsWith(variables['Build.Reason'], 'PullRequest')))
    dependsOn: GetChangedFiles
    steps:
      - template: template-pipeline.yml
        parameters:
          microservice: 'ui'
          dockerfilePath: 'ui/Dockerfile'
          azureSubscription: 'test-aks-application12'
          imageName: '$(Build.Repository.Name)-$(Build.SourceBranchName)-ui:$(Build.BuildId)'

  - job: BuildUsers
    displayName: 'Build Users Service'
    condition: and(contains(variables['ChangedFiles'], 'users/'), not(startsWith(variables['Build.Reason'], 'PullRequest')))
    dependsOn: GetChangedFiles
    steps:
      - template: template-pipeline.yml
        parameters:
          microservice: 'users'
          dockerfilePath: 'users/Dockerfile'
          azureSubscription: 'test-aks-application12'
          imageName: '$(Build.Repository.Name)-$(Build.SourceBranchName)-users:$(Build.BuildId)'

  - job: BuildPosts
    displayName: 'Build Posts Service'
    condition: and(contains(variables['ChangedFiles'], 'posts/'), not(startsWith(variables['Build.Reason'], 'PullRequest')))
    dependsOn: GetChangedFiles
    steps:
      - template: template-pipeline.yml
        parameters:
          microservice: 'posts'
          dockerfilePath: 'posts/Dockerfile'
          azureSubscription: 'test-aks-application12'
          imageName: '$(Build.Repository.Name)-$(Build.SourceBranchName)-posts:$(Build.BuildId)'

  - job: BuildComments
    displayName: 'Build Comments Service'
    condition: and(contains(variables['ChangedFiles'], 'comments/'), not(startsWith(variables['Build.Reason'], 'PullRequest')))
    dependsOn: GetChangedFiles
    steps:
      - template: template-pipeline.yml
        parameters:
          microservice: 'comments'
          dockerfilePath: 'comments/Dockerfile'
          azureSubscription: 'test-aks-application12'
          imageName: '$(Build.Repository.Name)-$(Build.SourceBranchName)-comments:$(Build.BuildId)'
